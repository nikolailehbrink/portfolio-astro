diff --git a/dist/plugins/astro/index.js b/dist/plugins/astro/index.js
index 30e87b3d90bffea487321db282a9e3539f850573..2254b1d82d65ccc01884f761ac91025bfd34d801 100644
--- a/dist/plugins/astro/index.js
+++ b/dist/plugins/astro/index.js
@@ -1,46 +1,52 @@
-import { toDependency, toEntry, toProductionEntry } from '../../util/input.js';
-import { hasDependency } from '../../util/plugin.js';
-import { getSrcDir } from './resolveFromAST.js';
-const title = 'Astro';
-const enablers = ['astro'];
+import { toDependency, toEntry, toProductionEntry } from "../../util/input.js";
+import { hasDependency } from "../../util/plugin.js";
+import { getSrcDir } from "./resolveFromAST.js";
+const title = "Astro";
+const enablers = ["astro"];
 const isEnabled = ({ dependencies }) => hasDependency(dependencies, enablers);
-export const config = ['astro.config.{js,cjs,mjs,ts,mts}'];
-const entry = ['src/content/config.ts', 'src/content.config.ts'];
-const project = ['src/**/*'];
+export const config = ["astro.config.{js,cjs,mjs,ts,mts}"];
+const entry = ["src/content/config.ts", "src/content.config.ts"];
+const project = ["src/**/*"];
 const production = [
-    'src/pages/**/*.{astro,mdx,js,ts}',
-    '!src/pages/**/_*',
-    '!src/pages/**/_*/**',
-    'src/content/**/*.mdx',
-    'src/middleware.{js,ts}',
-    'src/actions/index.{js,ts}',
+  "src/pages/**/*.{astro,mdx,js,ts}",
+  "!src/pages/**/_*",
+  "!src/pages/**/_*/**",
+  "src/content/**/*.mdx",
+  "src/middleware.{js,ts}",
+  "src/actions/index.{js,ts}",
+  "db/seed.{js,ts}",
+  "db/config.{js,ts}",
 ];
-const resolveFromAST = sourceFile => {
-    const srcDir = getSrcDir(sourceFile);
-    const setSrcDir = (entry) => entry.replace(/^`src\//, `${srcDir}/`);
-    return [
-        ...entry.map(setSrcDir).map(path => toEntry(path)),
-        ...production.map(setSrcDir).map(path => toProductionEntry(path)),
-    ];
+const resolveFromAST = (sourceFile) => {
+  const srcDir = getSrcDir(sourceFile);
+  const setSrcDir = (entry) => entry.replace(/^`src\//, `${srcDir}/`);
+  return [
+    ...entry.map(setSrcDir).map((path) => toEntry(path)),
+    ...production.map(setSrcDir).map((path) => toProductionEntry(path)),
+  ];
 };
-const resolve = options => {
-    const { manifest, isProduction } = options;
-    const inputs = [];
-    if (!isProduction &&
-        manifest.scripts &&
-        Object.values(manifest.scripts).some(script => /(?<=^|\s)astro(\s|\s.+\s)check(?=\s|$)/.test(script))) {
-        inputs.push(toDependency('@astrojs/check'));
-    }
-    return inputs;
+const resolve = (options) => {
+  const { manifest, isProduction } = options;
+  const inputs = [];
+  if (
+    !isProduction &&
+    manifest.scripts &&
+    Object.values(manifest.scripts).some((script) =>
+      /(?<=^|\s)astro(\s|\s.+\s)check(?=\s|$)/.test(script),
+    )
+  ) {
+    inputs.push(toDependency("@astrojs/check"));
+  }
+  return inputs;
 };
 export default {
-    title,
-    enablers,
-    isEnabled,
-    config,
-    entry,
-    production,
-    resolveFromAST,
-    resolve,
-    project,
+  title,
+  enablers,
+  isEnabled,
+  config,
+  entry,
+  production,
+  resolveFromAST,
+  resolve,
+  project,
 };
