---
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
import type { HTMLAttributes } from "astro/types";

type Props = {
  buttons: Array<{
    text: string;
    variant: VariantProps<typeof buttonVariants>["variant"];
  }>;
} & HTMLAttributes<"div">;

const { buttons, class: className = "", ...props } = Astro.props;

const buttonVariants = cva(
  `relative overflow-hidden rounded-md border bg-neutral-900 px-3 py-1.5 text-sm
  text-neutral-100 hover:bg-neutral-800`,
  {
    variants: {
      variant: {
        flat: "border-neutral-600",
        gradient: `border-neutral-600 before:absolute before:inset-0
        before:bg-linear-to-b before:from-white/20 before:to-transparent`,
        "darker-border": `border-neutral-900 shadow-md before:absolute
        before:inset-0 before:bg-linear-to-b before:from-white/20
        before:to-transparent`,
        "inset-shadow": `border-neutral-900 shadow-md inset-shadow-2xs
        inset-shadow-neutral-700 before:absolute before:inset-0
        before:bg-linear-to-b before:from-white/20 before:to-transparent`,
        active: `border-neutral-950 shadow-md inset-shadow-2xs
        inset-shadow-neutral-600 before:absolute before:inset-0
        before:bg-linear-to-b before:from-white/20 before:to-transparent
        active:bg-neutral-950 active:shadow-none
        active:inset-shadow-neutral-800`,
        final: `cursor-pointer border-neutral-950 shadow-md inset-shadow-2xs
        inset-shadow-neutral-600 transition-all before:absolute before:inset-0
        before:bg-linear-to-b before:from-white/20 before:to-transparent
        active:bg-neutral-950 active:shadow-none
        active:inset-shadow-neutral-800`,
      },
    },
  },
);
---

<div
  class={cn(
    "not-prose flex justify-center rounded-lg bg-foreground p-4",
    className,
  )}
  {...props}
>
  {
    buttons.length > 1 ? (
      <div class="flex gap-2">
        {buttons.map((button) => (
          <button class={buttonVariants({ variant: button.variant })}>
            {button.text}
          </button>
        ))}
      </div>
    ) : (
      <button class={buttonVariants({ variant: buttons[0].variant })}>
        {buttons[0].text}
      </button>
    )
  }
</div>
