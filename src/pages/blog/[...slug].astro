---
import { type CollectionEntry, render } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import { estimateReadingTime } from "@/lib/readingTime";
import { generateToc, getPosts } from "@/lib/posts";
import BlogImage from "@/components/BlogImage.astro";
import BlogLink from "@/components/BlogLink.astro";
import CodeBlock from "@/components/CodeBlock.astro";

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const readingTime = estimateReadingTime(post.body);
const { Content, headings } = await render(post);
const updatedHeadings = headings.map((heading) =>
  heading.text.startsWith("#")
    ? { ...heading, text: heading.text.substring(1) }
    : heading,
);
const tableOfContents = generateToc(updatedHeadings);
---

<BlogPost
  readingTime={readingTime}
  tableOfContents={tableOfContents}
  {...post.data}
>
  <!-- TODO: Prevent empty paragraphs from being created for img  -->
  <Content components={{ img: BlogImage, a: BlogLink, pre: CodeBlock }} />
</BlogPost>
